import React, { useState } from 'react';
import PropTypes from 'prop-types';
import registry from '../../data/registry.json';
import {
  Breadcrumb,
  BreadcrumbItem,
  Button,
  CodeSnippet,
  FormLabel,
  Link,
  ListItem,
  Tab,
  Tabs,
  Tooltip,
  UnorderedList,
} from 'carbon-components-react';
import AppHeader from '../../components/AppHeader';
import AppFooter from '../../components/AppFooter';

import buildCodeSnippet from './buildCodeSnippet';
import {
  ArrowRight16,
  CopyLink16,
  DocumentTasks32,
  DocumentView32,
  LogoGithub16,
  NoImage32,
  ScriptReference32,
  WarningAlt16,
} from '@carbon/icons-react';
import EmbedWidget from './EmbedWidget';

const WidgetTypePage = ({
  match: {
    params: { shortCode },
  },
}) => {
  const widget = registry.find(({ shortcode }) => shortcode === shortCode);
  const tabsProps = {
    role: 'presentation',
    tabIndex: 0,
  };
  const tabProps = {
    role: 'presentation',
    tabIndex: 0,
  };
  const [startLoadingWidget, setStartLoadingWidget] = useState(false);

  const buildRandomWidgetSettings = (widget) => {
    if (
      !widget.settingsSchema ||
      !widget.settingsSchema.properties.fields ||
      !Object.keys(widget.settingsSchema.properties.fields.properties).length
    ) {
      return [];
    }
    return Object.keys(widget.settingsSchema.properties.fields.properties).reduce(
      (carry, fieldName) => {
        const fieldInfo = widget.settingsSchema.properties.fields.properties[fieldName];
        const randomIndex = Math.floor(Math.random() * fieldInfo.examples.length);
        const randomExample = fieldInfo.examples[randomIndex];
        return Object.assign(carry, { [fieldName]: randomExample });
      },
      {},
    );
  };
  const randomSettings = buildRandomWidgetSettings(widget);
  const widgetAttributes = Object.keys(randomSettings).reduce((carry, name) => {
    carry[`data-${name}`] = randomSettings[name];
    return carry;
  }, {});

  return (
    <>
      <AppHeader />
      <div className="bx--grid bx--grid--full-width landing-page widget-type">
        <Tabs className="widget-type--tabs" {...tabsProps}>
          <Tab {...tabProps} id={`${widget.shortcode}--tab-1`} label="Information">
            <div className="bx--row bx--row--r1">
              <div className="bx--col-lg-16">
                <Breadcrumb noTrailingSlash>
                  <BreadcrumbItem href="/">Home</BreadcrumbItem>
                  <BreadcrumbItem href="/widget-types">Widget types</BreadcrumbItem>
                  <BreadcrumbItem isCurrentPage href="/">
                    {widget.title}
                  </BreadcrumbItem>
                </Breadcrumb>
                <div className="widget-type__heading--wrapper">
                  <div className="widget-type__heading">
                    <div className="widget-type__heading--icon">
                      <DocumentTasks32 />
                    </div>
                    <h1 className="widget-type__heading--text">{widget.title}</h1>
                  </div>
                  {widget.repositoryUrl ? (
                    <div className="widget-type__heading--repo-link">
                      <Button href={widget.repositoryUrl} renderIcon={LogoGithub16} kind="tertiary">
                        Source code
                      </Button>
                    </div>
                  ) : (
                    <></>
                  )}
                </div>
              </div>
            </div>
            <div className="bx--row bx--row--r2">
              <div className="bx--col-lg-8">
                <p className="widget-type--notes">
                  All the information contained in this page has been extracted from the widget
                  registry. Some info is generated by the compilation process, while some other is
                  provided by the widget developer in the{' '}
                  <CodeSnippet type="inline">widget.json</CodeSnippet> file.
                </p>
              </div>
            </div>
            <div className="bx--row bx--row--r3">
              <div className="bx--col-lg-8">
                <FormLabel>
                  <Tooltip triggerText="Thumbnail">
                    Thumbnail image as stored in the widget type code base. Check the &ldquo;Live
                    preview&rdquo; tab for an interactive demo.
                  </Tooltip>
                </FormLabel>
                {widget.files.find((file) => file === 'thumbnail.svg') ? (
                  <div>
                    <img src={`${widget.directoryUrl}/thumbnail.svg`} alt="Widget thumbnail" />
                  </div>
                ) : (
                  <div>
                    <NoImage32 />
                  </div>
                )}
              </div>
              <div className="bx--col-lg-4">
                <FormLabel>Version</FormLabel>
                <div>
                  {widget.status ? (
                    <>
                      <CodeSnippet type="inline" className={`status--${widget.status}`}>
                        {widget.status}
                      </CodeSnippet>{' '}
                    </>
                  ) : (
                    <></>
                  )}
                  <code className="widget-type--version">{widget.version}</code>
                </div>
              </div>
              <div className="bx--col-lg-4">
                <FormLabel>Date</FormLabel>
                <UnorderedList>
                  <ListItem>
                    Created on{' '}
                    {widget.createdAt ? new Date(widget.createdAt).toDateString() : 'Unknown'}
                  </ListItem>
                  <ListItem>
                    Updated on{' '}
                    {widget.updatedAt ? new Date(widget.updatedAt).toDateString() : 'Unknown'}
                  </ListItem>
                </UnorderedList>
              </div>
            </div>
            <article className="bx--row bx--row--r4">
              <section className="bx--col-lg-8 bx--col-md-8">
                <FormLabel>Description</FormLabel>
                <p className="widget-type--description">{widget.description}</p>
              </section>
              <aside className="bx--col-lg-4 bx--col-md-4 bx--col-sm-4">
                <div>
                  <FormLabel>
                    <Tooltip triggerText="Files">
                      Technical information about the compiled assets of the widget.
                    </Tooltip>
                  </FormLabel>
                  <UnorderedList>
                    {widget.files.map((file, i) => (
                      <ListItem key={`key-${i}`}>
                        <CodeSnippet type="inline">{file}</CodeSnippet>
                      </ListItem>
                    ))}
                  </UnorderedList>
                </div>
                <div>
                  <FormLabel className="bx--label--inline--sm">
                    <Tooltip triggerText="External dependencies">
                      This widget expects the following dependecies to exist in the page when being
                      rendered.
                    </Tooltip>
                  </FormLabel>
                  <UnorderedList>
                    {Object.keys(widget.externalPeerDependencies || {}).map((depName, i) => (
                      <ListItem key={`key-${i}`}>
                        <Tooltip triggerText={depName} renderIcon={CopyLink16}>
                          <p id="tooltip-body">{widget.externalPeerDependencies[depName].src}</p>
                          <div className="bx--tooltip__footer">
                            <Button
                              href={widget.externalPeerDependencies[depName].src}
                              size="small"
                              renderIcon={ArrowRight16}
                            >
                              Visit
                            </Button>
                          </div>
                        </Tooltip>
                      </ListItem>
                    ))}
                  </UnorderedList>
                </div>
              </aside>
              <aside className="bx--col-lg-4 bx--col-md-4 bx--col-sm-4">
                <FormLabel>Translations</FormLabel>
                <UnorderedList>
                  {widget.availableTranslations.map((langcode, i) => (
                    <ListItem key={`key-${i}`}>
                      <CodeSnippet type="inline">{langcode}</CodeSnippet>
                    </ListItem>
                  ))}
                </UnorderedList>
              </aside>
            </article>
          </Tab>
          <Tab {...tabProps} id={`${widget.shortcode}--tab-3`} label="Code snippet">
            <div className="bx--row bx--row--r1">
              <div className="bx--col-lg-16">
                <Breadcrumb noTrailingSlash>
                  <BreadcrumbItem href="/">Home</BreadcrumbItem>
                  <BreadcrumbItem href="/widget-types">Widget types</BreadcrumbItem>
                  <BreadcrumbItem isCurrentPage href="/">
                    {widget.title}
                  </BreadcrumbItem>
                </Breadcrumb>
                <div className="widget-type__heading--wrapper">
                  <div className="widget-type__heading">
                    <div className="widget-type__heading--icon">
                      <ScriptReference32 />
                    </div>
                    <h1 className="widget-type__heading--text">{widget.title}</h1>
                  </div>
                  {widget.repositoryUrl ? (
                    <div className="widget-type__heading--repo-link">
                      <Button href={widget.repositoryUrl} renderIcon={LogoGithub16} kind="tertiary">
                        Source code
                      </Button>
                    </div>
                  ) : (
                    <></>
                  )}
                </div>
              </div>
            </div>
            <div className="bx--row bx--row--r2">
              <div className="bx--col-lg-8">
                <p>
                  Use the following snippet of code to inject this widget in an static HTML page. If
                  you are looking for a more advanced integration, take a look at the{' '}
                  <Link href="https://drupal.org/project/widget_instance">Drupal module</Link>, and
                  the <Link href="https://www.youtube.com/watch?v=SdDEbP-vtZg">demo video</Link>.
                </p>
              </div>
              <div className="bx--col-lg-16">
                <CodeSnippet type="multi" hideCopyButton={true}>
                  {buildCodeSnippet(widget)}
                </CodeSnippet>
              </div>
            </div>
          </Tab>
          <Tab
            {...tabProps}
            id={`${widget.shortcode}--tab-3`}
            label="Live Preview"
            onClick={() => setStartLoadingWidget(true)}
          >
            <div className="bx--row bx--row--r1">
              <div className="bx--col-lg-16">
                <Breadcrumb noTrailingSlash>
                  <BreadcrumbItem href="/">Home</BreadcrumbItem>
                  <BreadcrumbItem href="/widget-types">Widget types</BreadcrumbItem>
                  <BreadcrumbItem isCurrentPage href="/">
                    {widget.title}
                  </BreadcrumbItem>
                </Breadcrumb>
                <div className="widget-type__heading--wrapper">
                  <div className="widget-type__heading">
                    <div className="widget-type__heading--icon">
                      <DocumentView32 />
                    </div>
                    <h1 className="widget-type__heading--text">{widget.title}</h1>
                  </div>
                  {widget.repositoryUrl ? (
                    <div className="widget-type__heading--repo-link">
                      <Button href={widget.repositoryUrl} renderIcon={LogoGithub16} kind="tertiary">
                        Source code
                      </Button>
                    </div>
                  ) : (
                    <></>
                  )}
                </div>
              </div>
            </div>
            <div className="bx--row bx--row--r2">
              <div className="bx--col-lg-12 some-content" style={{ display: 'flex' }}>
                <EmbedWidget
                  widget={widget}
                  doLoad={startLoadingWidget}
                  moreProps={widgetAttributes}
                />
              </div>
              <div className="bx--col-lg-4">
                <h3>Widget settings</h3>
                <div className="widget-type--settings-warning">
                  <WarningAlt16 style={{ marginRight: '5px' }} />
                  <div>
                    Some widget types require settings at the time of embedding the widget. Here are
                    some example values.
                  </div>
                </div>
                <UnorderedList className="widget-type--settings-values">
                  {Object.keys(randomSettings).map((fieldName) => {
                    const field = widget.settingsSchema.properties.fields.properties[fieldName];
                    return (
                      <ListItem key={fieldName}>
                        <FormLabel>
                          <Tooltip triggerText={`${field.title} (${field.type})`}>
                            {field.description}
                          </Tooltip>
                        </FormLabel>
                        <div>{randomSettings[fieldName]}</div>
                      </ListItem>
                    );
                  })}
                </UnorderedList>
              </div>
            </div>
          </Tab>
        </Tabs>
        <AppFooter />
      </div>
    </>
  );
};

WidgetTypePage.propTypes = {
  match: PropTypes.shape({
    params: PropTypes.shape({
      shortCode: PropTypes.string,
    }),
  }),
};

export default WidgetTypePage;
