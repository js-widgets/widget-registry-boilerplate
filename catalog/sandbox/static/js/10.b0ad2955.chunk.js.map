{"version":3,"sources":["content/HomePage/HomePage.jsx","content/HomePage/index.js","components/Info/Info.jsx","components/AppFooter/AppFooter.jsx","components/AppFooter/index.js","components/AppHeader/AppHeader.jsx","components/AppHeader/index.js"],"names":["HomePage","tabProps","role","tabIndex","AppHeader","className","Breadcrumb","noTrailingSlash","aria-label","BreadcrumbItem","href","Tabs","selected","Tab","label","to","Button","kind","renderIcon","Launch32","src","process","alt","AppFooter","InfoSection","children","heading","InfoCard","props","splitHeading","phrase","splitPhrase","split","thirdWord","pop","join","createArrayFromPhrase","body","icon","HeaderContainer","render","isSideNavExpanded","onClickSideNavExpand","Header","SkipToContent","HeaderMenuButton","onClick","isActive","HeaderName","element","Link","prefix","HeaderNavigation","HeaderMenuItem","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar"],"mappings":"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","file":"static/js/10.b0ad2955.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem, Button, Tabs, Tab } from 'carbon-components-react';\nimport AppHeader from '../../components/AppHeader';\nimport AppFooter from '../../components/AppFooter';\nimport { Launch32, ArrowRight16 } from '@carbon/icons-react';\n\nconst HomePage = () => {\n  const tabsProps = {\n    selected: 0,\n    role: 'navigation',\n  };\n  const tabProps = {\n    role: 'presentation',\n    tabIndex: 0,\n  };\n  return (\n    <>\n      <AppHeader />\n      <div className=\"bx--grid bx--grid--full-width landing-page\">\n        <div className=\"bx--row landing-page__banner\">\n          <div className=\"bx--col-lg-16\">\n            <Breadcrumb noTrailingSlash aria-label=\"Page navigation\">\n              <BreadcrumbItem>\n                <a href=\"/\">Home</a>\n              </BreadcrumbItem>\n            </Breadcrumb>\n            <h1 className=\"landing-page__heading\">Design &amp; build with Widgets</h1>\n          </div>\n        </div>\n        <div className=\"bx--row landing-page__r2\">\n          <div className=\"bx--col bx--no-gutter\">\n            <Tabs {...tabsProps} aria-label=\"Tab navigation\">\n              <Tab {...tabProps} label=\"About\">\n                <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                  <div className=\"bx--row landing-page__tab-content\">\n                    <div className=\"bx--col-md-4 bx--col-lg-7\">\n                      <h2 className=\"landing-page__subheading\">What are widgets?</h2>\n                      <p className=\"landing-page__p\">\n                        Widgets types are stand alone JavaScript applications ready to use in any\n                        publishing context. JavaScript developers develop widgets in their own\n                        repositories, so they can be syndicated and embedded in publishing\n                        platforms. These include popular CMS, static HTML, other JavaScript\n                        applications, etc.\n                      </p>\n                      <p className=\"landing-page__p\">\n                        Build your digital strategy using widgets to maximize reuse of your\n                        development efforts. Widgets are designed to allow you to focus on your\n                        strategy rather than on development.\n                      </p>\n                      <Link to={`/widget-types`} className=\"bx--btn bx--btn--primary\">\n                        All widgets <ArrowRight16 className=\"bx--btn__icon\" />\n                      </Link>\n                      &nbsp;\n                      <Button\n                        kind=\"ghost\"\n                        href=\"https://github.com/js-widgets/widget-registry-boilerplate#readme\"\n                        renderIcon={Launch32}\n                      >\n                        Learn more\n                      </Button>\n                    </div>\n                    <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                      <img\n                        className=\"landing-page__illo\"\n                        src={`${process.env.PUBLIC_URL}/tab-illo.png`}\n                        alt=\"Carbon illustration\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </Tab>\n              <Tab {...tabProps} label=\"Develop\">\n                <div className=\"bx--grid bx--grid--no-gutter bx--grid--full-width\">\n                  <div className=\"bx--row landing-page__tab-content\">\n                    <div className=\"bx--col-md-4 bx--col-lg-7\">\n                      <h2 className=\"landing-page__subheading\">Develop widgets</h2>\n                      <p className=\"landing-page__p\">\n                        Widgets can be as simple as a personalized CTA, or as complex as a full\n                        embedded product catalog. Widgets are a powerful tool to build reactive\n                        applications that are stamped all across your digital properties.\n                      </p>\n                      <h3 className=\"landing-page__subheading--3\">Configurable</h3>\n                      <p className=\"landing-page__p\">\n                        Your widgets can accept external input. This can affect what the color\n                        scheme should be, what language should be used, what is the personalized\n                        text for the call-to-action button, or what data source to use to fecth for\n                        content. This allows you to maintain a single code base powering many\n                        variants without code duplication.\n                      </p>\n                      <h3 className=\"landing-page__subheading--3\">i18n</h3>\n                      <p className=\"landing-page__p\">\n                        Widgets are ready for internationalization. Both interface text and content\n                        can be expressed in your users language.\n                      </p>\n                      <Button\n                        kind=\"ghost\"\n                        href=\"https://github.com/js-widgets/example-widget\"\n                        renderIcon={Launch32}\n                      >\n                        Check an example\n                      </Button>\n                    </div>\n                    <div className=\"bx--col-md-4 bx--offset-lg-1 bx--col-lg-8\">\n                      <img\n                        className=\"landing-page__develop\"\n                        src={`${process.env.PUBLIC_URL}/tab-developers.png`}\n                        alt=\"Carbon illustration\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </Tab>\n            </Tabs>\n          </div>\n        </div>\n        <AppFooter />\n      </div>\n    </>\n  );\n};\n\nexport default HomePage;\n","import HomePage from './HomePage';\nexport default HomePage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Take in a phrase and separate the third word in an array\nfunction createArrayFromPhrase(phrase) {\n  const splitPhrase = phrase.split(' ');\n  const thirdWord = splitPhrase.pop();\n  return [splitPhrase.join(' '), thirdWord];\n}\n\nconst InfoSection = ({ className, children, heading }) => (\n  <section className={`bx--row ${className} info-section`}>\n    <div className=\"bx--col-md-8 bx--col-lg-4 bx--col-xlg-3\">\n      <h3 className=\"info-section__heading\">{heading}</h3>\n    </div>\n    {children}\n  </section>\n);\n\nconst InfoCard = (props) => {\n  const splitHeading = createArrayFromPhrase(props.heading);\n\n  return (\n    <article className=\"info-card bx--col-md-4 bx--col-lg-4 bx--col-xlg-3 bx--offset-xlg-1\">\n      <h4 className=\"info-card__heading\">\n        {`${splitHeading[0]} `}\n        <strong>{splitHeading[1]}</strong>\n      </h4>\n      <p className=\"info-card__body\">{props.body}</p>\n      {props.icon}\n    </article>\n  );\n};\n\nInfoSection.propTypes = {\n  className: PropTypes.string,\n  heading: PropTypes.string,\n  children: PropTypes.any,\n};\n\nInfoCard.propTypes = {\n  heading: PropTypes.string,\n  body: PropTypes.string,\n  icon: PropTypes.element,\n};\n\nexport { InfoSection, InfoCard };\n","import React from 'react';\nimport { InfoCard, InfoSection } from '../Info';\nimport { Application32, Migrate32, SettingsAdjust32 } from '@carbon/icons-react';\n\nconst AppFooter = () => (\n  <InfoSection heading=\"The Principles\" className=\"landing-page__r3\">\n    <InfoCard\n      heading=\"Widgets are Configurable\"\n      body='Build once and embed many times. Configure your widgets when embedding to leverage the same widget in multiple situations. \"Tweak the widget knobs and stamp\".'\n      icon={<SettingsAdjust32 />}\n    />\n    <InfoCard\n      heading=\"Widgets are Modular\"\n      body=\"Widgets are designed to work seamlessly with each other in any digital experience. Use them in a website, or an application, as your digital building blocks.\"\n      icon={<Application32 />}\n    />\n    <InfoCard\n      heading=\"Widgets are Consistent\"\n      body=\"Weather your organization uses a CMS, static HTML, or any other tech widgets stay the same. Feel free to re-platform while keeping your widgets intact. Leverage the CMS integrations for a better editorial experience.\"\n      icon={<Migrate32 />}\n    />\n  </InfoSection>\n);\n\nexport default AppFooter;\n","import AppFooter from './AppFooter';\nexport default AppFooter;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from 'carbon-components-react';\n\nconst AppHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label=\"Widget Catalog\">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName element={Link} to=\"/\" prefix=\"JS Widgets\">\n          Widget Catalog\n        </HeaderName>\n        <HeaderNavigation aria-label=\"Widget Catalog\">\n          <HeaderMenuItem element={Link} to=\"/widget-types\">\n            Widget Types\n          </HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav aria-label=\"Side navigation\" expanded={isSideNavExpanded} isPersistent={false}>\n          <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem element={Link} to=\"/widget-types\">\n                Widget Types\n              </HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar />\n      </Header>\n    )}\n  />\n);\n\nexport default AppHeader;\n","import AppHeader from './AppHeader';\nexport default AppHeader;\n"],"sourceRoot":""}